#!/bin/sh
#
#
#	EnableLocksActivateVG OCF RA. 
#	This fires off a vgchange --lock-start and an
#	vgchange -a y VG
#
# Based off of a RA to fire off a script by Eric Meddaugh at RIT (which
# was based off of the "Dummy" resource agent
#
# I'm making some assumptions that various programs are already in the 
# path. (vgchange, lvmlockctl etc)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of version 2 of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# Further, this software is distributed without any warranty that it is
# free of the rightful claim of any third person regarding infringement
# or the like.  Any license provided herein, whether implied or
# otherwise, applies only to this software file.  Patent licenses, if
# any, provided herein do not apply to combinations of this program with
# other software, or any other product whatsoever.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc., 59 Temple Place - Suite 330, Boston MA 02111-1307, USA.
#
#######################################################################
# OCF parameters:
#   OCF_RESKEY_script_name - The name of the script to run.
#   OCF_RESKEY_script_args - Arguments to pass into the script if needed.
#######################################################################

#######################################################################
# Initialization:

: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/heartbeat}
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs

#######################################################################

meta_data() {
	cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="EnableLocksActivateVG" version="0.9">
<version>1.0</version>

<longdesc lang="en">
This is the EnableLocksActivateVG Resource Agent. It fires off a 
'vgchange --lock-[start,stop]' followed by a 'vgchange -a y VG'

This exists because apparently lvmlockd is too new for pacemaker to have
all the hooks in correctly.  

</longdesc>
<shortdesc lang="en">Start or stop LVM VG locking from EnableLocksActivateVG </shortdesc>

<parameters>
<parameter name="VG_to_work_on" unique="0" required="1">
<longdesc lang="en">
The name of the Volume Group to fire off the activate/deactivate to.
</longdesc>
<shortdesc lang="en">VG to activate</shortdesc>
<content type="string" default="" />
</parameter>
</parameters>


<actions>
<action name="start"        timeout="20" />
<action name="stop"         timeout="20" />
<action name="monitor"      timeout="20" interval="10" depth="0" />
<action name="migrate_to"   timeout="20" />
<action name="migrate_from" timeout="20" />
<action name="meta-data"    timeout="5" />
<action name="validate-all"   timeout="20" />
</actions>
</resource-agent>
END
}

#######################################################################

VG_NAME="${OCF_RESKEY_VG_to_work_on}"

EnableLocksActivateVG_usage() {
	cat <<END
usage: $0 {start|stop|monitor|migrate_to|migrate_from|validate-all|meta-data}

Expects to have a fully populated OCF RA-compliant environment set.
END
}

EnableLocksActivateVG_start() {
    echo vgchange --lock-start ${VG_NAME} | logger --tag $HOSTNAME-lockstart-DEBUG --server thecloud.main.ad.rit.edu -P 9001
    vgchange --lock-start ${VG_NAME}
    echo vgchange -a y  ${VG_NAME} | logger --tag $HOSTNAME-lockstart-DEBUG --server thecloud.main.ad.rit.edu -P 9001
    vgchange -a y  ${VG_NAME}

    if EnableLocksActivateVG_status ${VG_NAME} ; then
	return $OCF_SUCCESS
    else
	ocf_exit_reason "EnableLocksActivateVG: failed to start lock on volume group ${VG_NAME}"
	return $OCF_NOT_RUNNING
    fi
    
}

EnableLocksActivateVG_stop() {
    echo vgchange -a n ${VG_NAME} | logger --tag $HOSTNAME-lockstop-DEBUG --server thecloud.main.ad.rit.edu -P 9001
    vgchange -a n ${VG_NAME}
    echo vgchange --lock-stop ${VG_NAME} | logger --tag $HOSTNAME-lockstop-DEBUG --server thecloud.main.ad.rit.edu -P 9001
    vgchange --lock-stop ${VG_NAME}

    if EnableLocksActivateVG_status ${VG_NAME} ; then
	ocf_exit_reason "EnableLocksActivateVG: failed to stop lock on volume group ${VG_NAME}"
        return $OCF_ERR_GENERIC
    else
        return $OCF_SUCCESS
    fi


}

EnableLocksActivateVG_status() {
	#The original check would fail out every now and then with no real reason.  Seeing if the /sys method is more robust
	#if [ "`lvmlockctl -i | grep \"^VG ${VG_NAME} \"`" ] ; then
	if [ -e "/sys/kernel/debug/dlm/lvm_${VG_NAME}" ] ; then
		#echo ${VG_NAME} lock success - Begin Dump | logger --tag $HOSTNAME-lockstatus-DEBUG --server thecloud.main.ad.rit.edu -P 9001
		#lvmlockctl -i | logger --tag $HOSTNAME-lockstatus-DEBUG --server thecloud.main.ad.rit.edu -P 9001
		#echo ${VG_NAME} lock success - End Dump | logger --tag $HOSTNAME-lockstatus-DEBUG --server thecloud.main.ad.rit.edu -P 9001
		
		#We found a lock for the VG
		return 0
	else
		echo ${VG_NAME} lock fail - Begin Dump | logger --tag $HOSTNAME-lockstatus-DEBUG --server thecloud.main.ad.rit.edu -P 9001
		lvmlockctl -i | logger --tag $HOSTNAME-lockstatus-DEBUG --server thecloud.main.ad.rit.edu -P 9001
		echo ${VG_NAME} lock fail - End Dump | logger --tag $HOSTNAME-lockstatus-DEBUG --server thecloud.main.ad.rit.edu -P 9001

		#We didnt' find a lock for the VG or it's otherwise broken
		return 7
	fi
}

EnableLocksActivateVG_validate() {
    
    # Assume vgchange exists and EnableLocksActivateVG is running
    #  Eventually test for lvmetad enabled, lvmlockd enabled and binaries exist
	echo "Validate called.. I dunno" | logger --tag $HOSTNAME-lockvalidate-DEBUG --server thecloud.main.ad.rit.edu -P 9001
    return $OCF_SUCCESS
}

##: ${OCF_RESKEY_state=${HA_RSCTMP}/EnableLocksActivateVG-${OCF_RESOURCE_INSTANCE}.state}
##: ${OCF_RESKEY_fake="EnableLocksActivateVG"}


case $__OCF_ACTION in
meta-data)	meta_data
		exit $OCF_SUCCESS
		;;
start)		EnableLocksActivateVG_start
		exit $?;;
	
stop)		EnableLocksActivateVG_stop
		exit $?;;

monitor)	EnableLocksActivateVG_status
		exit $?;;

migrate_to)	ocf_log info "Migrating ${OCF_RESOURCE_INSTANCE} to ${OCF_RESKEY_CRM_meta_migrate_target}."
	        EnableLocksActivateVG_stop
		;;
migrate_from)	ocf_log info "Migrating ${OCF_RESOURCE_INSTANCE} from ${OCF_RESKEY_CRM_meta_migrate_source}."
	        EnableLocksActivateVG_start
		;;
validate-all)	EnableLocksActivateVG_validate;;
usage|help)	EnableLocksActivateVG_usage
		exit $OCF_SUCCESS
		;;
*)		EnableLocksActivateVG_usage
		exit $OCF_ERR_UNIMPLEMENTED
		;;
esac
rc=$?
ocf_log debug "${OCF_RESOURCE_INSTANCE} $__OCF_ACTION : $rc"
exit $rc

